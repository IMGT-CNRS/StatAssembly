name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Software version'
        required: true
      prerelease:
        description: 'Pre-release?'
        required: false
        default: false
  push:
    tags:
      - v[0-9]+.*

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.TOKEN }}
          generate_notes: true
          overwrite: true

  upload-assets:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup OpenSSL
      if: runner.os == 'windows'
      run: |
          # Download OpenSSL installer
          Invoke-WebRequest -Uri "https://slproweb.com/download/Win64OpenSSL_Light-3_0_10.msi" -OutFile openssl.msi
          
          # Install OpenSSL silently
          Start-Process -FilePath "msiexec.exe" -Args "/package openssl.msi /quiet" -Wait
          
          # Set environment variables
          $env:OPENSSL_DIR = "C:\Program Files\OpenSSL-Win64"
          $env:OPENSSL_NO_VENDOR = "1"
          $env:RUSTFLAGS = "-Ctarget-feature=+crt-static"
          
          # Add OpenSSL bin directory to PATH
          $env:PATH += ";$env:OPENSSL_DIR\bin"
          
          # Download root certificates
          New-Item -ItemType Directory -Force -Path "$env:OPENSSL_DIR\certs"
          Invoke-WebRequest -Uri "https://curl.se/ca/cacert.pem" -OutFile "$env:OPENSSL_DIR\certs\cacert.pem"
          $env:SSL_CERT_FILE = "$env:OPENSSL_DIR\certs\cacert.pem"
    - name: Install dependencies
      if: runner.os == 'linux'
      run: |
          sudo apt-get update
          sudo apt-get -y install \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libtiff-dev \
            libconfig++-dev \
            libconfig-dev
    - uses: actions/checkout@v4
    - uses: taiki-e/upload-rust-binary-action@v1
      with:
        bin: IMGT_StatAssembly
        target: ${{ matrix.target }}
        tar: unix
        zip: windows
        token: ${{ secrets.GITHUB_TOKEN }}
